##Call

const pessoa = {
	nome: 'Miguel';
};

const animal = {
	nome: 'Murphy';
};

function getSomething() {
	console.log(this.nome);
}

getSomething call(pessoa);

//Miguel

const pessoa = {
	nome: 'Miguel';
};

const animal = {
	nome: 'Murphy';
};

function getSomething() {
	console.log(this.nome);
}

getSomething.call(animal);

//Murphy

É possível passar parâmetros para essa função
separando-os por vírgulas.

const myObj = {
	num1: 2,
	num2: 4,
};

function soma(a, b) {
	console.log(this.num1 + this.num2 + a + b);
}

soma.call(myObj, 1, 5);

//12

##Apply

const pessoa = {
	nome: 'Miguel';
};

const animal = {
	nome: 'Godi';
};

function getSomething() {
	console.log(this.nome);
}

getSomething.apply(pessoa);

//Miguel

É possível passar parâmetros para essa função
dentro de um array.

const myObj = {
	num1: 2,
	num2: 4,
};

function soma(a, b) {
	console.log(this.num1 + this.num2 + a + b);
}

soma.apply(myObj, [1, 5]);

//12

##Bind

Clona a estrutura da função onde é chamada e
aplica o valor do objeto passado como parâmetro.

const retornaNomes = function() {
	return this.nome;
};

let bruno = retornaNomes.brind({ nome: 'Bruno' });

bruno();

//Bruno

